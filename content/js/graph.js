/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 94.0, "minX": 0.0, "maxY": 5638832.0, "series": [{"data": [[0.0, 94.0], [0.1, 105.0], [0.2, 110.0], [0.3, 116.0], [0.4, 117.0], [0.5, 119.0], [0.6, 122.0], [0.7, 125.0], [0.8, 128.0], [0.9, 129.0], [1.0, 134.0], [1.1, 137.0], [1.2, 147.0], [1.3, 153.0], [1.4, 155.0], [1.5, 161.0], [1.6, 164.0], [1.7, 170.0], [1.8, 175.0], [1.9, 184.0], [2.0, 188.0], [2.1, 192.0], [2.2, 196.0], [2.3, 199.0], [2.4, 202.0], [2.5, 205.0], [2.6, 208.0], [2.7, 211.0], [2.8, 217.0], [2.9, 223.0], [3.0, 229.0], [3.1, 233.0], [3.2, 237.0], [3.3, 243.0], [3.4, 246.0], [3.5, 249.0], [3.6, 255.0], [3.7, 263.0], [3.8, 268.0], [3.9, 272.0], [4.0, 275.0], [4.1, 279.0], [4.2, 282.0], [4.3, 286.0], [4.4, 294.0], [4.5, 300.0], [4.6, 305.0], [4.7, 309.0], [4.8, 312.0], [4.9, 314.0], [5.0, 317.0], [5.1, 321.0], [5.2, 323.0], [5.3, 328.0], [5.4, 332.0], [5.5, 338.0], [5.6, 343.0], [5.7, 350.0], [5.8, 354.0], [5.9, 355.0], [6.0, 361.0], [6.1, 364.0], [6.2, 367.0], [6.3, 369.0], [6.4, 375.0], [6.5, 380.0], [6.6, 385.0], [6.7, 389.0], [6.8, 393.0], [6.9, 397.0], [7.0, 401.0], [7.1, 405.0], [7.2, 410.0], [7.3, 417.0], [7.4, 423.0], [7.5, 430.0], [7.6, 433.0], [7.7, 439.0], [7.8, 442.0], [7.9, 445.0], [8.0, 452.0], [8.1, 456.0], [8.2, 462.0], [8.3, 468.0], [8.4, 475.0], [8.5, 478.0], [8.6, 481.0], [8.7, 485.0], [8.8, 489.0], [8.9, 494.0], [9.0, 500.0], [9.1, 505.0], [9.2, 511.0], [9.3, 515.0], [9.4, 517.0], [9.5, 520.0], [9.6, 522.0], [9.7, 525.0], [9.8, 529.0], [9.9, 534.0], [10.0, 541.0], [10.1, 546.0], [10.2, 550.0], [10.3, 553.0], [10.4, 556.0], [10.5, 557.0], [10.6, 559.0], [10.7, 562.0], [10.8, 564.0], [10.9, 569.0], [11.0, 573.0], [11.1, 577.0], [11.2, 581.0], [11.3, 586.0], [11.4, 589.0], [11.5, 592.0], [11.6, 594.0], [11.7, 597.0], [11.8, 599.0], [11.9, 603.0], [12.0, 607.0], [12.1, 610.0], [12.2, 614.0], [12.3, 621.0], [12.4, 625.0], [12.5, 628.0], [12.6, 631.0], [12.7, 633.0], [12.8, 636.0], [12.9, 639.0], [13.0, 640.0], [13.1, 642.0], [13.2, 645.0], [13.3, 647.0], [13.4, 650.0], [13.5, 653.0], [13.6, 655.0], [13.7, 659.0], [13.8, 661.0], [13.9, 665.0], [14.0, 667.0], [14.1, 669.0], [14.2, 671.0], [14.3, 673.0], [14.4, 676.0], [14.5, 677.0], [14.6, 679.0], [14.7, 681.0], [14.8, 683.0], [14.9, 684.0], [15.0, 686.0], [15.1, 687.0], [15.2, 688.0], [15.3, 690.0], [15.4, 691.0], [15.5, 694.0], [15.6, 698.0], [15.7, 701.0], [15.8, 703.0], [15.9, 706.0], [16.0, 709.0], [16.1, 710.0], [16.2, 711.0], [16.3, 714.0], [16.4, 715.0], [16.5, 717.0], [16.6, 719.0], [16.7, 720.0], [16.8, 721.0], [16.9, 723.0], [17.0, 725.0], [17.1, 728.0], [17.2, 730.0], [17.3, 732.0], [17.4, 734.0], [17.5, 737.0], [17.6, 740.0], [17.7, 742.0], [17.8, 744.0], [17.9, 746.0], [18.0, 748.0], [18.1, 750.0], [18.2, 752.0], [18.3, 754.0], [18.4, 756.0], [18.5, 758.0], [18.6, 759.0], [18.7, 762.0], [18.8, 763.0], [18.9, 765.0], [19.0, 767.0], [19.1, 769.0], [19.2, 771.0], [19.3, 773.0], [19.4, 775.0], [19.5, 778.0], [19.6, 780.0], [19.7, 781.0], [19.8, 783.0], [19.9, 785.0], [20.0, 787.0], [20.1, 790.0], [20.2, 792.0], [20.3, 793.0], [20.4, 794.0], [20.5, 796.0], [20.6, 798.0], [20.7, 798.0], [20.8, 799.0], [20.9, 800.0], [21.0, 801.0], [21.1, 802.0], [21.2, 803.0], [21.3, 806.0], [21.4, 808.0], [21.5, 809.0], [21.6, 812.0], [21.7, 814.0], [21.8, 817.0], [21.9, 819.0], [22.0, 821.0], [22.1, 823.0], [22.2, 825.0], [22.3, 826.0], [22.4, 829.0], [22.5, 831.0], [22.6, 832.0], [22.7, 833.0], [22.8, 835.0], [22.9, 835.0], [23.0, 837.0], [23.1, 838.0], [23.2, 839.0], [23.3, 840.0], [23.4, 842.0], [23.5, 842.0], [23.6, 843.0], [23.7, 845.0], [23.8, 846.0], [23.9, 848.0], [24.0, 850.0], [24.1, 852.0], [24.2, 853.0], [24.3, 855.0], [24.4, 857.0], [24.5, 858.0], [24.6, 860.0], [24.7, 862.0], [24.8, 863.0], [24.9, 865.0], [25.0, 868.0], [25.1, 869.0], [25.2, 871.0], [25.3, 872.0], [25.4, 874.0], [25.5, 875.0], [25.6, 877.0], [25.7, 879.0], [25.8, 880.0], [25.9, 881.0], [26.0, 882.0], [26.1, 882.0], [26.2, 884.0], [26.3, 886.0], [26.4, 888.0], [26.5, 889.0], [26.6, 891.0], [26.7, 893.0], [26.8, 896.0], [26.9, 898.0], [27.0, 899.0], [27.1, 903.0], [27.2, 906.0], [27.3, 907.0], [27.4, 910.0], [27.5, 911.0], [27.6, 913.0], [27.7, 914.0], [27.8, 915.0], [27.9, 916.0], [28.0, 917.0], [28.1, 918.0], [28.2, 919.0], [28.3, 920.0], [28.4, 921.0], [28.5, 923.0], [28.6, 924.0], [28.7, 925.0], [28.8, 927.0], [28.9, 929.0], [29.0, 930.0], [29.1, 932.0], [29.2, 934.0], [29.3, 936.0], [29.4, 939.0], [29.5, 940.0], [29.6, 943.0], [29.7, 944.0], [29.8, 945.0], [29.9, 948.0], [30.0, 949.0], [30.1, 950.0], [30.2, 952.0], [30.3, 953.0], [30.4, 955.0], [30.5, 956.0], [30.6, 957.0], [30.7, 959.0], [30.8, 959.0], [30.9, 960.0], [31.0, 961.0], [31.1, 962.0], [31.2, 962.0], [31.3, 963.0], [31.4, 965.0], [31.5, 966.0], [31.6, 968.0], [31.7, 969.0], [31.8, 970.0], [31.9, 972.0], [32.0, 973.0], [32.1, 975.0], [32.2, 978.0], [32.3, 979.0], [32.4, 983.0], [32.5, 984.0], [32.6, 986.0], [32.7, 988.0], [32.8, 990.0], [32.9, 991.0], [33.0, 992.0], [33.1, 993.0], [33.2, 995.0], [33.3, 997.0], [33.4, 998.0], [33.5, 999.0], [33.6, 1000.0], [33.7, 1001.0], [33.8, 1002.0], [33.9, 1004.0], [34.0, 1005.0], [34.1, 1006.0], [34.2, 1007.0], [34.3, 1008.0], [34.4, 1010.0], [34.5, 1011.0], [34.6, 1013.0], [34.7, 1014.0], [34.8, 1016.0], [34.9, 1019.0], [35.0, 1020.0], [35.1, 1022.0], [35.2, 1023.0], [35.3, 1023.0], [35.4, 1025.0], [35.5, 1026.0], [35.6, 1027.0], [35.7, 1029.0], [35.8, 1031.0], [35.9, 1032.0], [36.0, 1033.0], [36.1, 1034.0], [36.2, 1035.0], [36.3, 1037.0], [36.4, 1038.0], [36.5, 1039.0], [36.6, 1040.0], [36.7, 1040.0], [36.8, 1041.0], [36.9, 1042.0], [37.0, 1042.0], [37.1, 1043.0], [37.2, 1044.0], [37.3, 1045.0], [37.4, 1046.0], [37.5, 1048.0], [37.6, 1049.0], [37.7, 1050.0], [37.8, 1052.0], [37.9, 1053.0], [38.0, 1054.0], [38.1, 1056.0], [38.2, 1057.0], [38.3, 1058.0], [38.4, 1059.0], [38.5, 1062.0], [38.6, 1064.0], [38.7, 1065.0], [38.8, 1066.0], [38.9, 1067.0], [39.0, 1069.0], [39.1, 1070.0], [39.2, 1071.0], [39.3, 1073.0], [39.4, 1073.0], [39.5, 1075.0], [39.6, 1076.0], [39.7, 1077.0], [39.8, 1078.0], [39.9, 1079.0], [40.0, 1080.0], [40.1, 1081.0], [40.2, 1082.0], [40.3, 1083.0], [40.4, 1085.0], [40.5, 1086.0], [40.6, 1087.0], [40.7, 1088.0], [40.8, 1089.0], [40.9, 1090.0], [41.0, 1093.0], [41.1, 1095.0], [41.2, 1096.0], [41.3, 1098.0], [41.4, 1099.0], [41.5, 1101.0], [41.6, 1103.0], [41.7, 1105.0], [41.8, 1107.0], [41.9, 1108.0], [42.0, 1109.0], [42.1, 1110.0], [42.2, 1111.0], [42.3, 1113.0], [42.4, 1114.0], [42.5, 1116.0], [42.6, 1116.0], [42.7, 1117.0], [42.8, 1119.0], [42.9, 1120.0], [43.0, 1121.0], [43.1, 1122.0], [43.2, 1123.0], [43.3, 1124.0], [43.4, 1125.0], [43.5, 1126.0], [43.6, 1127.0], [43.7, 1128.0], [43.8, 1129.0], [43.9, 1132.0], [44.0, 1135.0], [44.1, 1137.0], [44.2, 1139.0], [44.3, 1141.0], [44.4, 1143.0], [44.5, 1145.0], [44.6, 1147.0], [44.7, 1149.0], [44.8, 1150.0], [44.9, 1151.0], [45.0, 1154.0], [45.1, 1155.0], [45.2, 1156.0], [45.3, 1157.0], [45.4, 1157.0], [45.5, 1158.0], [45.6, 1160.0], [45.7, 1161.0], [45.8, 1162.0], [45.9, 1163.0], [46.0, 1165.0], [46.1, 1166.0], [46.2, 1167.0], [46.3, 1168.0], [46.4, 1170.0], [46.5, 1172.0], [46.6, 1174.0], [46.7, 1177.0], [46.8, 1179.0], [46.9, 1182.0], [47.0, 1184.0], [47.1, 1187.0], [47.2, 1188.0], [47.3, 1190.0], [47.4, 1192.0], [47.5, 1194.0], [47.6, 1195.0], [47.7, 1196.0], [47.8, 1198.0], [47.9, 1199.0], [48.0, 1199.0], [48.1, 1202.0], [48.2, 1203.0], [48.3, 1205.0], [48.4, 1207.0], [48.5, 1208.0], [48.6, 1209.0], [48.7, 1210.0], [48.8, 1214.0], [48.9, 1216.0], [49.0, 1218.0], [49.1, 1220.0], [49.2, 1221.0], [49.3, 1224.0], [49.4, 1226.0], [49.5, 1228.0], [49.6, 1230.0], [49.7, 1232.0], [49.8, 1233.0], [49.9, 1234.0], [50.0, 1235.0], [50.1, 1237.0], [50.2, 1239.0], [50.3, 1241.0], [50.4, 1243.0], [50.5, 1245.0], [50.6, 1247.0], [50.7, 1248.0], [50.8, 1249.0], [50.9, 1251.0], [51.0, 1255.0], [51.1, 1257.0], [51.2, 1262.0], [51.3, 1265.0], [51.4, 1270.0], [51.5, 1271.0], [51.6, 1274.0], [51.7, 1276.0], [51.8, 1278.0], [51.9, 1279.0], [52.0, 1280.0], [52.1, 1282.0], [52.2, 1284.0], [52.3, 1286.0], [52.4, 1290.0], [52.5, 1294.0], [52.6, 1298.0], [52.7, 1300.0], [52.8, 1303.0], [52.9, 1307.0], [53.0, 1309.0], [53.1, 1311.0], [53.2, 1315.0], [53.3, 1317.0], [53.4, 1318.0], [53.5, 1320.0], [53.6, 1322.0], [53.7, 1326.0], [53.8, 1329.0], [53.9, 1332.0], [54.0, 1335.0], [54.1, 1342.0], [54.2, 1345.0], [54.3, 1348.0], [54.4, 1351.0], [54.5, 1352.0], [54.6, 1355.0], [54.7, 1358.0], [54.8, 1360.0], [54.9, 1362.0], [55.0, 1364.0], [55.1, 1367.0], [55.2, 1370.0], [55.3, 1374.0], [55.4, 1380.0], [55.5, 1385.0], [55.6, 1389.0], [55.7, 1392.0], [55.8, 1395.0], [55.9, 1398.0], [56.0, 1399.0], [56.1, 1401.0], [56.2, 1405.0], [56.3, 1408.0], [56.4, 1409.0], [56.5, 1410.0], [56.6, 1416.0], [56.7, 1420.0], [56.8, 1424.0], [56.9, 1427.0], [57.0, 1430.0], [57.1, 1434.0], [57.2, 1437.0], [57.3, 1440.0], [57.4, 1443.0], [57.5, 1448.0], [57.6, 1450.0], [57.7, 1456.0], [57.8, 1462.0], [57.9, 1466.0], [58.0, 1471.0], [58.1, 1477.0], [58.2, 1480.0], [58.3, 1483.0], [58.4, 1489.0], [58.5, 1494.0], [58.6, 1501.0], [58.7, 1505.0], [58.8, 1511.0], [58.9, 1518.0], [59.0, 1520.0], [59.1, 1523.0], [59.2, 1527.0], [59.3, 1532.0], [59.4, 1535.0], [59.5, 1542.0], [59.6, 1545.0], [59.7, 1549.0], [59.8, 1554.0], [59.9, 1555.0], [60.0, 1557.0], [60.1, 1559.0], [60.2, 1563.0], [60.3, 1568.0], [60.4, 1571.0], [60.5, 1576.0], [60.6, 1579.0], [60.7, 1585.0], [60.8, 1589.0], [60.9, 1592.0], [61.0, 1596.0], [61.1, 1599.0], [61.2, 1601.0], [61.3, 1604.0], [61.4, 1609.0], [61.5, 1616.0], [61.6, 1619.0], [61.7, 1623.0], [61.8, 1630.0], [61.9, 1633.0], [62.0, 1635.0], [62.1, 1637.0], [62.2, 1641.0], [62.3, 1646.0], [62.4, 1650.0], [62.5, 1654.0], [62.6, 1657.0], [62.7, 1665.0], [62.8, 1671.0], [62.9, 1675.0], [63.0, 1679.0], [63.1, 1684.0], [63.2, 1688.0], [63.3, 1691.0], [63.4, 1697.0], [63.5, 1701.0], [63.6, 1707.0], [63.7, 1712.0], [63.8, 1715.0], [63.9, 1719.0], [64.0, 1722.0], [64.1, 1727.0], [64.2, 1729.0], [64.3, 1736.0], [64.4, 1740.0], [64.5, 1745.0], [64.6, 1749.0], [64.7, 1753.0], [64.8, 1756.0], [64.9, 1760.0], [65.0, 1762.0], [65.1, 1765.0], [65.2, 1767.0], [65.3, 1771.0], [65.4, 1776.0], [65.5, 1782.0], [65.6, 1785.0], [65.7, 1791.0], [65.8, 1793.0], [65.9, 1796.0], [66.0, 1800.0], [66.1, 1804.0], [66.2, 1808.0], [66.3, 1814.0], [66.4, 1821.0], [66.5, 1827.0], [66.6, 1833.0], [66.7, 1837.0], [66.8, 1841.0], [66.9, 1843.0], [67.0, 1847.0], [67.1, 1851.0], [67.2, 1853.0], [67.3, 1856.0], [67.4, 1859.0], [67.5, 1862.0], [67.6, 1868.0], [67.7, 1871.0], [67.8, 1874.0], [67.9, 1876.0], [68.0, 1880.0], [68.1, 1882.0], [68.2, 1883.0], [68.3, 1886.0], [68.4, 1888.0], [68.5, 1891.0], [68.6, 1895.0], [68.7, 1898.0], [68.8, 1902.0], [68.9, 1911.0], [69.0, 1915.0], [69.1, 1917.0], [69.2, 1919.0], [69.3, 1920.0], [69.4, 1922.0], [69.5, 1925.0], [69.6, 1927.0], [69.7, 1932.0], [69.8, 1939.0], [69.9, 1943.0], [70.0, 1947.0], [70.1, 1951.0], [70.2, 1955.0], [70.3, 1958.0], [70.4, 1961.0], [70.5, 1964.0], [70.6, 1967.0], [70.7, 1973.0], [70.8, 1976.0], [70.9, 1980.0], [71.0, 1988.0], [71.1, 1993.0], [71.2, 1998.0], [71.3, 2001.0], [71.4, 2003.0], [71.5, 2008.0], [71.6, 2012.0], [71.7, 2019.0], [71.8, 2023.0], [71.9, 2031.0], [72.0, 2034.0], [72.1, 2040.0], [72.2, 2042.0], [72.3, 2046.0], [72.4, 2048.0], [72.5, 2054.0], [72.6, 2059.0], [72.7, 2067.0], [72.8, 2073.0], [72.9, 2080.0], [73.0, 2082.0], [73.1, 2087.0], [73.2, 2092.0], [73.3, 2100.0], [73.4, 2106.0], [73.5, 2112.0], [73.6, 2118.0], [73.7, 2122.0], [73.8, 2127.0], [73.9, 2133.0], [74.0, 2138.0], [74.1, 2144.0], [74.2, 2152.0], [74.3, 2157.0], [74.4, 2161.0], [74.5, 2165.0], [74.6, 2173.0], [74.7, 2179.0], [74.8, 2186.0], [74.9, 2193.0], [75.0, 2197.0], [75.1, 2201.0], [75.2, 2204.0], [75.3, 2208.0], [75.4, 2212.0], [75.5, 2219.0], [75.6, 2231.0], [75.7, 2238.0], [75.8, 2243.0], [75.9, 2247.0], [76.0, 2250.0], [76.1, 2260.0], [76.2, 2266.0], [76.3, 2272.0], [76.4, 2277.0], [76.5, 2278.0], [76.6, 2281.0], [76.7, 2289.0], [76.8, 2296.0], [76.9, 2307.0], [77.0, 2318.0], [77.1, 2323.0], [77.2, 2330.0], [77.3, 2338.0], [77.4, 2344.0], [77.5, 2352.0], [77.6, 2358.0], [77.7, 2361.0], [77.8, 2365.0], [77.9, 2376.0], [78.0, 2384.0], [78.1, 2392.0], [78.2, 2398.0], [78.3, 2401.0], [78.4, 2407.0], [78.5, 2413.0], [78.6, 2422.0], [78.7, 2429.0], [78.8, 2433.0], [78.9, 2438.0], [79.0, 2443.0], [79.1, 2450.0], [79.2, 2455.0], [79.3, 2470.0], [79.4, 2472.0], [79.5, 2475.0], [79.6, 2480.0], [79.7, 2485.0], [79.8, 2492.0], [79.9, 2501.0], [80.0, 2512.0], [80.1, 2522.0], [80.2, 2527.0], [80.3, 2534.0], [80.4, 2544.0], [80.5, 2550.0], [80.6, 2558.0], [80.7, 2564.0], [80.8, 2568.0], [80.9, 2573.0], [81.0, 2576.0], [81.1, 2582.0], [81.2, 2590.0], [81.3, 2594.0], [81.4, 2599.0], [81.5, 2601.0], [81.6, 2605.0], [81.7, 2612.0], [81.8, 2618.0], [81.9, 2627.0], [82.0, 2633.0], [82.1, 2638.0], [82.2, 2642.0], [82.3, 2650.0], [82.4, 2656.0], [82.5, 2664.0], [82.6, 2669.0], [82.7, 2679.0], [82.8, 2683.0], [82.9, 2690.0], [83.0, 2700.0], [83.1, 2707.0], [83.2, 2715.0], [83.3, 2721.0], [83.4, 2727.0], [83.5, 2734.0], [83.6, 2740.0], [83.7, 2748.0], [83.8, 2754.0], [83.9, 2761.0], [84.0, 2770.0], [84.1, 2779.0], [84.2, 2787.0], [84.3, 2794.0], [84.4, 2797.0], [84.5, 2800.0], [84.6, 2804.0], [84.7, 2813.0], [84.8, 2822.0], [84.9, 2835.0], [85.0, 2841.0], [85.1, 2848.0], [85.2, 2865.0], [85.3, 2879.0], [85.4, 2881.0], [85.5, 2889.0], [85.6, 2905.0], [85.7, 2915.0], [85.8, 2920.0], [85.9, 2932.0], [86.0, 2952.0], [86.1, 2961.0], [86.2, 2970.0], [86.3, 2983.0], [86.4, 2991.0], [86.5, 3000.0], [86.6, 3006.0], [86.7, 3019.0], [86.8, 3031.0], [86.9, 3039.0], [87.0, 3046.0], [87.1, 3053.0], [87.2, 3072.0], [87.3, 3082.0], [87.4, 3102.0], [87.5, 3114.0], [87.6, 3125.0], [87.7, 3138.0], [87.8, 3149.0], [87.9, 3157.0], [88.0, 3168.0], [88.1, 3181.0], [88.2, 3199.0], [88.3, 3204.0], [88.4, 3222.0], [88.5, 3233.0], [88.6, 3248.0], [88.7, 3265.0], [88.8, 3281.0], [88.9, 3289.0], [89.0, 3308.0], [89.1, 3322.0], [89.2, 3353.0], [89.3, 3368.0], [89.4, 3391.0], [89.5, 3412.0], [89.6, 3438.0], [89.7, 3468.0], [89.8, 3485.0], [89.9, 3500.0], [90.0, 3519.0], [90.1, 3544.0], [90.2, 3565.0], [90.3, 3595.0], [90.4, 3604.0], [90.5, 3627.0], [90.6, 3648.0], [90.7, 3692.0], [90.8, 3713.0], [90.9, 3745.0], [91.0, 3784.0], [91.1, 3801.0], [91.2, 3830.0], [91.3, 3865.0], [91.4, 3916.0], [91.5, 3950.0], [91.6, 3995.0], [91.7, 4019.0], [91.8, 4048.0], [91.9, 4088.0], [92.0, 4120.0], [92.1, 4151.0], [92.2, 4188.0], [92.3, 4229.0], [92.4, 4244.0], [92.5, 4298.0], [92.6, 4335.0], [92.7, 4371.0], [92.8, 4419.0], [92.9, 4454.0], [93.0, 4524.0], [93.1, 4559.0], [93.2, 4649.0], [93.3, 4689.0], [93.4, 4760.0], [93.5, 4799.0], [93.6, 4852.0], [93.7, 4928.0], [93.8, 4964.0], [93.9, 5011.0], [94.0, 5045.0], [94.1, 5102.0], [94.2, 5196.0], [94.3, 5232.0], [94.4, 5304.0], [94.5, 5372.0], [94.6, 5433.0], [94.7, 5482.0], [94.8, 5528.0], [94.9, 5599.0], [95.0, 5682.0], [95.1, 5788.0], [95.2, 5875.0], [95.3, 5988.0], [95.4, 6045.0], [95.5, 6117.0], [95.6, 6199.0], [95.7, 6257.0], [95.8, 6327.0], [95.9, 6396.0], [96.0, 6480.0], [96.1, 6563.0], [96.2, 6651.0], [96.3, 6724.0], [96.4, 6808.0], [96.5, 6943.0], [96.6, 7079.0], [96.7, 7220.0], [96.8, 7422.0], [96.9, 7619.0], [97.0, 7818.0], [97.1, 8099.0], [97.2, 8229.0], [97.3, 8533.0], [97.4, 8893.0], [97.5, 9060.0], [97.6, 9441.0], [97.7, 9779.0], [97.8, 9964.0], [97.9, 10359.0], [98.0, 10759.0], [98.1, 11200.0], [98.2, 11633.0], [98.3, 12032.0], [98.4, 12281.0], [98.5, 12721.0], [98.6, 13032.0], [98.7, 13891.0], [98.8, 14609.0], [98.9, 14884.0], [99.0, 15292.0], [99.1, 16069.0], [99.2, 16654.0], [99.3, 17553.0], [99.4, 19303.0], [99.5, 21377.0], [99.6, 22768.0], [99.7, 25411.0], [99.8, 29481.0], [99.9, 51568.0]], "isOverall": false, "label": "Verifikasi Kasus Faskes - Draft", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 949.0, "series": [{"data": [[0.0, 4.0], [100.0, 274.0], [35300.0, 1.0], [200.0, 263.0], [300.0, 300.0], [400.0, 244.0], [500.0, 339.0], [600.0, 461.0], [700.0, 626.0], [800.0, 746.0], [900.0, 789.0], [1000.0, 949.0], [1100.0, 795.0], [1200.0, 564.0], [1300.0, 403.0], [1400.0, 304.0], [1500.0, 312.0], [1600.0, 281.0], [1700.0, 305.0], [1800.0, 333.0], [1900.0, 302.0], [2000.0, 243.0], [2100.0, 217.0], [2200.0, 214.0], [2300.0, 167.0], [2400.0, 200.0], [2500.0, 187.0], [2600.0, 188.0], [2700.0, 177.0], [2800.0, 132.0], [2900.0, 112.0], [3000.0, 110.0], [3100.0, 99.0], [3200.0, 88.0], [3300.0, 58.0], [3400.0, 55.0], [3500.0, 57.0], [3600.0, 46.0], [3700.0, 43.0], [3800.0, 33.0], [3900.0, 31.0], [4000.0, 38.0], [4300.0, 30.0], [4100.0, 36.0], [4200.0, 32.0], [4400.0, 22.0], [4600.0, 22.0], [4500.0, 25.0], [4700.0, 23.0], [4800.0, 18.0], [5100.0, 16.0], [4900.0, 25.0], [5000.0, 27.0], [5200.0, 18.0], [5300.0, 21.0], [5400.0, 19.0], [5500.0, 23.0], [5600.0, 16.0], [5800.0, 14.0], [5700.0, 9.0], [6100.0, 16.0], [6000.0, 19.0], [5900.0, 12.0], [6200.0, 15.0], [6300.0, 20.0], [6600.0, 17.0], [6500.0, 11.0], [6400.0, 15.0], [6800.0, 12.0], [6700.0, 11.0], [6900.0, 8.0], [7000.0, 12.0], [7100.0, 8.0], [7200.0, 8.0], [7300.0, 6.0], [7400.0, 6.0], [7600.0, 5.0], [7500.0, 5.0], [7900.0, 5.0], [7700.0, 6.0], [7800.0, 4.0], [8100.0, 8.0], [8000.0, 6.0], [8200.0, 10.0], [8600.0, 3.0], [8700.0, 6.0], [8300.0, 2.0], [8400.0, 3.0], [8500.0, 1.0], [9100.0, 4.0], [9200.0, 4.0], [9000.0, 8.0], [8900.0, 4.0], [8800.0, 3.0], [9400.0, 3.0], [9300.0, 3.0], [9600.0, 7.0], [9500.0, 2.0], [9700.0, 1.0], [9900.0, 7.0], [10200.0, 4.0], [9800.0, 5.0], [10000.0, 3.0], [10100.0, 3.0], [10600.0, 5.0], [10700.0, 5.0], [10300.0, 3.0], [10400.0, 2.0], [11100.0, 2.0], [11200.0, 1.0], [10900.0, 5.0], [11000.0, 2.0], [10800.0, 1.0], [11400.0, 4.0], [11600.0, 3.0], [11300.0, 4.0], [11500.0, 3.0], [11700.0, 1.0], [12000.0, 7.0], [12200.0, 2.0], [12100.0, 6.0], [11900.0, 4.0], [11800.0, 3.0], [12400.0, 5.0], [12500.0, 2.0], [12300.0, 2.0], [12700.0, 2.0], [12600.0, 1.0], [12800.0, 5.0], [12900.0, 5.0], [13000.0, 4.0], [13200.0, 1.0], [13100.0, 1.0], [13800.0, 3.0], [13500.0, 3.0], [13600.0, 2.0], [14000.0, 1.0], [13900.0, 1.0], [14200.0, 1.0], [14600.0, 8.0], [14400.0, 6.0], [14500.0, 1.0], [14800.0, 3.0], [14700.0, 3.0], [15000.0, 6.0], [15200.0, 2.0], [15100.0, 2.0], [15300.0, 2.0], [14900.0, 2.0], [15400.0, 2.0], [15600.0, 1.0], [15800.0, 2.0], [16000.0, 2.0], [16300.0, 3.0], [15900.0, 3.0], [16200.0, 2.0], [16400.0, 3.0], [16600.0, 2.0], [16800.0, 3.0], [17000.0, 2.0], [17200.0, 2.0], [17400.0, 1.0], [18400.0, 1.0], [18000.0, 2.0], [17600.0, 2.0], [18600.0, 1.0], [20400.0, 1.0], [21000.0, 1.0], [20600.0, 1.0], [22000.0, 1.0], [21800.0, 2.0], [21600.0, 1.0], [22400.0, 1.0], [23400.0, 1.0], [22600.0, 1.0], [22800.0, 1.0], [23600.0, 1.0], [25400.0, 1.0], [26600.0, 1.0], [27400.0, 1.0], [27600.0, 2.0], [29400.0, 2.0], [29800.0, 1.0], [31400.0, 1.0], [42000.0, 1.0], [57200.0, 1.0], [69600.0, 1.0], [74400.0, 1.0], [36300.0, 1.0], [42700.0, 1.0], [47100.0, 1.0], [51500.0, 1.0], [100600.0, 1.0], [5634900.0, 1.0], [74100.0, 1.0], [106100.0, 1.0], [16700.0, 1.0], [16500.0, 3.0], [16900.0, 1.0], [17500.0, 1.0], [19300.0, 3.0], [19100.0, 2.0], [18900.0, 3.0], [19900.0, 1.0], [19500.0, 1.0], [20900.0, 1.0], [21300.0, 4.0], [21900.0, 1.0], [22100.0, 2.0], [22300.0, 1.0], [23500.0, 3.0], [22900.0, 1.0], [22700.0, 2.0], [23100.0, 1.0], [24100.0, 1.0], [23900.0, 1.0], [25500.0, 1.0], [24900.0, 1.0], [26100.0, 1.0], [27500.0, 1.0], [26900.0, 1.0], [28300.0, 1.0], [27900.0, 1.0], [31700.0, 1.0], [31900.0, 1.0], [35400.0, 1.0], [39800.0, 1.0], [336700.0, 1.0], [60200.0, 1.0], [72400.0, 1.0], [5638800.0, 1.0], [82000.0, 1.0]], "isOverall": false, "label": "Verifikasi Kasus Faskes - Draft", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5638800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 14.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 5979.0, "series": [{"data": [[0.0, 1087.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5979.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4981.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 14.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.62519546E12, "maxY": 100.0, "series": [{"data": [[1.62519558E12, 99.83469387755088], [1.62519552E12, 66.10710216483112], [1.6251957E12, 100.0], [1.62519564E12, 100.0], [1.62519576E12, 96.2400648824006], [1.62519546E12, 20.30225782957027], [1.62519594E12, 3.0], [1.62520128E12, 2.0]], "isOverall": false, "label": "Performance Test Pelaporan", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62520128E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 212.73913043478265, "minX": 2.0, "maxY": 1025124.4545454545, "series": [{"data": [[2.0, 1025124.4545454545], [3.0, 21238.625], [4.0, 661.21875], [5.0, 212.73913043478265], [6.0, 1070.6842105263158], [7.0, 378.6904761904762], [8.0, 717.1739130434783], [9.0, 581.1428571428571], [10.0, 289.53846153846155], [11.0, 231.5348837209302], [12.0, 936.05], [13.0, 363.595744680851], [14.0, 392.88888888888886], [15.0, 768.469387755102], [16.0, 387.38461538461536], [17.0, 502.86842105263145], [18.0, 612.2162162162161], [19.0, 348.672131147541], [20.0, 602.0], [21.0, 852.1785714285714], [22.0, 1458.857142857143], [23.0, 1548.4920634920636], [24.0, 425.3818181818181], [25.0, 439.98181818181826], [26.0, 525.6774193548387], [27.0, 487.5254237288136], [28.0, 529.1956521739131], [29.0, 667.549019607843], [30.0, 630.9736842105264], [31.0, 995.8863636363636], [32.0, 521.4516129032257], [33.0, 584.0344827586205], [34.0, 597.2280701754386], [35.0, 929.8333333333335], [36.0, 777.1756756756758], [37.0, 854.7142857142859], [38.0, 792.2500000000001], [39.0, 703.2542372881356], [40.0, 761.3061224489796], [41.0, 727.5964912280702], [42.0, 797.9772727272726], [43.0, 1920.0], [44.0, 1460.898550724638], [45.0, 670.0597014925376], [46.0, 816.9285714285716], [47.0, 844.5535714285713], [48.0, 1014.2777777777778], [49.0, 1392.3], [50.0, 1998.55], [51.0, 1202.8536585365855], [52.0, 1393.3333333333333], [53.0, 1609.472222222222], [54.0, 1853.576923076923], [55.0, 2056.608695652174], [56.0, 2109.0], [57.0, 2729.4999999999995], [58.0, 3451.466666666667], [59.0, 2038.6086956521738], [60.0, 953.95], [61.0, 1007.7800000000002], [62.0, 1317.9583333333335], [63.0, 2156.1212121212125], [64.0, 1984.042553191489], [65.0, 1840.4615384615386], [66.0, 3653.307692307693], [67.0, 2915.895833333333], [68.0, 1351.339622641509], [69.0, 1171.4680851063831], [70.0, 1200.6406250000005], [71.0, 1214.9411764705885], [72.0, 1518.2580645161293], [73.0, 1781.5714285714287], [74.0, 1383.9019607843138], [75.0, 1100.1739130434778], [76.0, 2195.722222222222], [77.0, 2056.0400000000004], [78.0, 1350.205128205128], [79.0, 1309.9552238805973], [80.0, 1619.5526315789473], [81.0, 1750.6060606060607], [82.0, 1108.2857142857142], [83.0, 1351.096153846154], [84.0, 1468.0624999999998], [85.0, 1402.6428571428569], [86.0, 1850.808510638297], [87.0, 1841.3200000000002], [88.0, 1606.0270270270273], [89.0, 1286.0566037735844], [90.0, 1781.0], [91.0, 2915.1794871794873], [92.0, 1238.157142857143], [93.0, 1931.986666666667], [94.0, 2269.576923076923], [95.0, 2198.428571428571], [96.0, 2854.9333333333334], [97.0, 2841.70588235294], [98.0, 1500.723684210526], [99.0, 1408.360655737705], [100.0, 2540.1647286821776]], "isOverall": false, "label": "Verifikasi Kasus Faskes - Draft", "isController": false}, {"data": [[83.0793466545065, 3020.421026448888]], "isOverall": false, "label": "Verifikasi Kasus Faskes - Draft-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.62519546E12, "maxY": 335656.4166666667, "series": [{"data": [[1.62519558E12, 335656.4166666667], [1.62519552E12, 300644.3], [1.6251957E12, 269730.05], [1.62519564E12, 172769.08333333334], [1.62519576E12, 140788.05], [1.62519546E12, 156773.55], [1.62519594E12, 77.13333333333334], [1.62520128E12, 130.73333333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62519558E12, 35414.95], [1.62519552E12, 31727.65], [1.6251957E12, 28450.05], [1.62519564E12, 18171.4], [1.62519576E12, 14857.65], [1.62519546E12, 16544.65], [1.62519594E12, 0.0], [1.62520128E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62520128E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 433.4151493080839, "minX": 1.62519546E12, "maxY": 5636903.5, "series": [{"data": [[1.62519558E12, 2020.9761904761913], [1.62519552E12, 1415.1933156095708], [1.6251957E12, 2543.6593313584417], [1.62519564E12, 3612.9274406332465], [1.62519576E12, 2488.1435523114365], [1.62519546E12, 433.4151493080839], [1.62519594E12, 336792.0], [1.62520128E12, 5636903.5]], "isOverall": false, "label": "Verifikasi Kasus Faskes - Draft", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62520128E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62519546E12, "maxY": 41426.5, "series": [{"data": [[1.62519558E12, 1865.6904761904757], [1.62519552E12, 1330.0900113938412], [1.6251957E12, 2191.2640710960636], [1.62519564E12, 2944.631926121374], [1.62519576E12, 2022.679643146796], [1.62519546E12, 425.0080116533145], [1.62519594E12, 0.0], [1.62520128E12, 41426.5]], "isOverall": false, "label": "Verifikasi Kasus Faskes - Draft", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62520128E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 10.715222141296433, "minX": 1.62519546E12, "maxY": 2819416.0, "series": [{"data": [[1.62519558E12, 68.31972789115657], [1.62519552E12, 51.47056589441701], [1.6251957E12, 107.09564113415138], [1.62519564E12, 241.1906332453825], [1.62519576E12, 99.38848337388481], [1.62519546E12, 10.715222141296433], [1.62519594E12, 336792.0], [1.62520128E12, 2819416.0]], "isOverall": false, "label": "Verifikasi Kasus Faskes - Draft", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62520128E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 94.0, "minX": 1.62519546E12, "maxY": 106177.0, "series": [{"data": [[1.62519558E12, 22403.0], [1.62519552E12, 12841.0], [1.6251957E12, 82055.0], [1.62519564E12, 42728.0], [1.62519576E12, 106177.0], [1.62519546E12, 2201.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62519558E12, 3320.0], [1.62519552E12, 2567.0], [1.6251957E12, 4881.400000000001], [1.62519564E12, 8496.400000000034], [1.62519576E12, 4129.200000000003], [1.62519546E12, 856.6000000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62519558E12, 8265.799999999996], [1.62519552E12, 5578.4599999999955], [1.6251957E12, 14960.760000000022], [1.62519564E12, 25474.400000000045], [1.62519576E12, 16123.040000000032], [1.62519546E12, 1409.26]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62519558E12, 4812.0], [1.62519552E12, 3173.4999999999986], [1.6251957E12, 7211.9000000000015], [1.62519564E12, 13038.599999999999], [1.62519576E12, 6089.3], [1.62519546E12, 1159.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62519558E12, 473.0], [1.62519552E12, 361.0], [1.6251957E12, 326.0], [1.62519564E12, 333.0], [1.62519576E12, 678.0], [1.62519546E12, 94.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62519558E12, 1402.0], [1.62519552E12, 1045.0], [1.6251957E12, 1481.0], [1.62519564E12, 1967.5], [1.62519576E12, 1410.0], [1.62519546E12, 350.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62519576E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 168.0, "minX": 1.0, "maxY": 5636903.5, "series": [{"data": [[2.0, 5308.0], [3.0, 6732.0], [4.0, 5684.0], [5.0, 3806.0], [6.0, 4331.5], [7.0, 2462.0], [8.0, 1660.0], [9.0, 2877.0], [10.0, 4358.0], [11.0, 3059.0], [12.0, 2618.0], [13.0, 4976.5], [14.0, 4275.5], [15.0, 1896.0], [16.0, 3041.5], [17.0, 1857.0], [18.0, 4003.5], [19.0, 2940.0], [20.0, 2893.5], [21.0, 3379.0], [22.0, 2550.5], [23.0, 1588.0], [24.0, 2369.0], [25.0, 2897.0], [26.0, 168.0], [27.0, 1307.0], [28.0, 1591.0], [29.0, 578.5], [30.0, 2280.0], [31.0, 1497.0], [33.0, 515.0], [32.0, 1682.0], [34.0, 1052.0], [35.0, 1160.0], [37.0, 1404.0], [36.0, 1858.5], [39.0, 1981.0], [38.0, 1781.0], [40.0, 973.5], [41.0, 1313.0], [43.0, 1548.0], [42.0, 1400.0], [45.0, 305.0], [44.0, 1393.5], [47.0, 874.0], [46.0, 2006.5], [49.0, 1027.5], [48.0, 1272.0], [51.0, 1088.0], [50.0, 1188.0], [53.0, 1214.0], [52.0, 1365.0], [54.0, 1409.0], [55.0, 1565.0], [56.0, 1085.5], [57.0, 1007.0], [58.0, 876.5], [59.0, 1159.0], [60.0, 1271.0], [61.0, 1403.0], [63.0, 711.5], [62.0, 1115.5], [66.0, 934.0], [64.0, 774.5], [65.0, 1274.0], [67.0, 1578.0], [69.0, 946.0], [70.0, 1040.0], [68.0, 865.0], [71.0, 1669.0], [75.0, 1017.5], [72.0, 1002.0], [78.0, 970.5], [77.0, 1934.0], [83.0, 1111.5], [81.0, 2901.0], [80.0, 1296.5], [84.0, 1191.5], [85.0, 2532.0], [92.0, 1820.5], [1.0, 3916.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 336792.0], [2.0, 5636903.5], [68.0, 42055.0], [36.0, 25579.5], [5.0, 27488.0], [21.0, 23598.0], [54.0, 20954.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 41426.5, "series": [{"data": [[2.0, 3132.5], [3.0, 6679.0], [4.0, 4703.5], [5.0, 3002.0], [6.0, 3459.5], [7.0, 2110.0], [8.0, 1369.5], [9.0, 2253.5], [10.0, 4293.5], [11.0, 2750.0], [12.0, 2157.5], [13.0, 3343.0], [14.0, 2903.0], [15.0, 1353.0], [16.0, 3019.0], [17.0, 1806.0], [18.0, 3939.0], [19.0, 2683.0], [20.0, 2748.5], [21.0, 3366.0], [22.0, 2522.5], [23.0, 1521.0], [24.0, 2345.0], [25.0, 2503.5], [26.0, 163.5], [27.0, 1292.0], [28.0, 1457.0], [29.0, 559.0], [30.0, 2063.5], [31.0, 1467.5], [33.0, 511.0], [32.0, 1641.0], [34.0, 1020.0], [35.0, 1147.0], [37.0, 1368.0], [36.0, 1850.5], [39.0, 1665.0], [38.0, 1713.5], [40.0, 965.5], [41.0, 1231.0], [43.0, 1266.5], [42.0, 1342.5], [45.0, 302.0], [44.0, 1340.0], [47.0, 867.0], [46.0, 1857.0], [49.0, 1005.0], [48.0, 1224.5], [51.0, 1068.0], [50.0, 1155.5], [53.0, 1191.0], [52.0, 1360.5], [54.0, 1355.0], [55.0, 1296.5], [56.0, 1069.5], [57.0, 997.5], [58.0, 846.0], [59.0, 1109.5], [60.0, 1240.0], [61.0, 1218.0], [63.0, 682.0], [62.0, 1091.0], [66.0, 911.5], [64.0, 770.0], [65.0, 1220.0], [67.0, 1503.5], [69.0, 943.0], [70.0, 1034.5], [68.0, 811.0], [71.0, 1401.0], [75.0, 1002.5], [72.0, 1002.0], [78.0, 924.5], [77.0, 1913.0], [83.0, 1109.5], [81.0, 2881.0], [80.0, 1015.5], [84.0, 1182.5], [85.0, 2478.0], [92.0, 1804.0], [1.0, 2407.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0], [2.0, 41426.5], [68.0, 0.0], [36.0, 0.0], [5.0, 0.0], [21.0, 0.0], [54.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 18.933333333333334, "minX": 1.62519546E12, "maxY": 49.083333333333336, "series": [{"data": [[1.62519558E12, 49.083333333333336], [1.62519552E12, 44.88333333333333], [1.6251957E12, 39.38333333333333], [1.62519564E12, 25.266666666666666], [1.62519576E12, 18.933333333333334], [1.62519546E12, 23.466666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62519576E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.62519546E12, "maxY": 48.983333333333334, "series": [{"data": [[1.62519558E12, 0.016666666666666666], [1.6251957E12, 0.03333333333333333], [1.62519564E12, 0.13333333333333333], [1.62519594E12, 0.016666666666666666], [1.62520128E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.62519558E12, 48.983333333333334], [1.62519552E12, 43.88333333333333], [1.6251957E12, 39.35], [1.62519564E12, 25.133333333333333], [1.62519576E12, 20.55], [1.62519546E12, 22.883333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62520128E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.62519546E12, "maxY": 48.983333333333334, "series": [{"data": [[1.62519558E12, 48.983333333333334], [1.62519552E12, 43.88333333333333], [1.6251957E12, 39.35], [1.62519564E12, 25.133333333333333], [1.62519576E12, 20.55], [1.62519546E12, 22.883333333333333]], "isOverall": false, "label": "Verifikasi Kasus Faskes - Draft-success", "isController": false}, {"data": [[1.62519558E12, 0.016666666666666666], [1.6251957E12, 0.03333333333333333], [1.62519564E12, 0.13333333333333333], [1.62519594E12, 0.016666666666666666], [1.62520128E12, 0.03333333333333333]], "isOverall": false, "label": "Verifikasi Kasus Faskes - Draft-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62520128E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.62519546E12, "maxY": 48.983333333333334, "series": [{"data": [[1.62519558E12, 48.983333333333334], [1.62519552E12, 43.88333333333333], [1.6251957E12, 39.35], [1.62519564E12, 25.133333333333333], [1.62519576E12, 20.55], [1.62519546E12, 22.883333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62519558E12, 0.016666666666666666], [1.6251957E12, 0.03333333333333333], [1.62519564E12, 0.13333333333333333], [1.62519594E12, 0.016666666666666666], [1.62520128E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62520128E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

